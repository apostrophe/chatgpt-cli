# Check if any arguments are provided
if [ "$#" -eq 0 ]; then
    echo "No arguments provided. Please provide at least one argument."
    return 1
fi

# Display the provided arguments
echo "===================================="
echo "          Argument List            "
echo "===================================="
for arg in "$@"; do
    echo " - $arg"
done
echo "===================================="

# Call the Python application with the arguments
python src/callChatGpt.py "$@"

# Summary of arguments
echo "Total arguments provided: $#"


account: gmail .biz acct

billing: https://platform.openai.com/settings/organization/billing/history (pay as you go)
pricing: https://openai.com/api/pricing/
api keys: https://platform.openai.com/api-keys
usage: https://platform.openai.com/usage

getting started: https://platform.openai.com/docs/api-reference/introduction
getting started 2: https://platform.openai.com/docs/api-reference/authentication?lang=curl

ui version of chatgpt: https://platform.openai.com/playground/chat?models=gpt-4o




---------------------------------------------------------------------------------------------------------------
(chatgpt-virtualenv) [general,chatgpt in python] $ ./callChatGpt.sh whats the recommended process for moving a python and bash script out of a vertual env and make it available everywhere on the linux machine?
----------------------------------------------------------------------------------------------------------------------
To move a Python and Bash script out of a virtual environment and make it available system-wide on a Linux machine, follow these steps:

1. **Deactivate the Virtual Environment:**
   If you are currently in the virtual environment, deactivate it by running:
   ```bash
   deactivate
   ```

2. **Identify the Scripts:**
   Locate the Python and Bash scripts you want to move. Ensure you have the full path to these scripts, e.g., `path/to/your_script.py` and `path/to/your_script.sh`.

3. **Choose a Directory:**
   Decide where you want to place the scripts for system-wide access. Common directories include:
   - `/usr/local/bin/` (for user-installed binaries)
   - `/usr/bin/` (for system-wide binaries)
   - `$HOME/bin/` (for user-specific binaries, if the directory exists in your PATH)

4. **Copy the Python Script:**
   Use the `cp` command to copy the Python script to the chosen directory. Replace `your_script.py` with the actual script name:
   ```bash
   sudo cp path/to/your_script.py /usr/local/bin/
   ```

5. **Copy the Bash Script:**
   Similarly, copy the Bash script to the chosen directory:
   ```bash
   sudo cp path/to/your_script.sh /usr/local/bin/
   ```

6. **Make Scripts Executable:**
   Ensure that both scripts are executable. You can use the `chmod` command for this:
   ```bash
   sudo chmod +x /usr/local/bin/your_script.py
   sudo chmod +x /usr/local/bin/your_script.sh
   ```

7. **Adding Python to the shebang (Optional):**
   Make sure your Python script has the correct shebang at the top. For instance:
   ```bash
   #!/usr/bin/env python3
   ```
   This assumes that you want to use Python 3.

8. **Update the PATH (if necessary):**
   If you copied scripts to a custom directory (e.g. `$HOME/bin/`), make sure that this directory is in your `PATH`. Add the following line to your `.bashrc` or `.bash_profile`:
   ```bash
   export PATH="$HOME/bin:$PATH"
   ```
   Then reload your profile:
   ```bash
   source ~/.bashrc
   ```

9. **Verify Accessibility:**
   After completing the steps, check if you can run the scripts from anywhere by typing:
   ```bash
   your_script.py
   ```
   or
   ```bash
   your_script.sh
   ```

10. **Test the Functions:**
    Finally, test that both scripts work as expected after moving them.

Following these steps will ensure that your Python and Bash scripts are available globally on your Linux machine.
---------------
